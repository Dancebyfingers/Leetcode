'''There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.'''


# equivalent to determine if the corresponding graph is a DAG (Directed Acyclic Graph)
class Solution: # Postorder DFS
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # determine if the corresponding graph is a DAG (Directed Acyclic Graph)
        from collections import defaultdict
        courseDict = defaultdict(list) 
        # defaultdict(<class 'list'>, {1: [], 2: []})

        for relation in prerequisites:
            nextCourse, prevCourse = relation[0], relation[1]
            courseDict[prevCourse].append(nextCourse)

        checked = [False] * numCourses
        path = [False] * numCourses

        for currCourse in range(numCourses):
            if self.isCyclic(currCourse, courseDict, checked, path):
                return False
        return True


    def isCyclic(self, currCourse, courseDict, checked, path):
        """   """
        # 1). bottom-cases
        if checked[currCourse]:
            # this node has been checked, no cycle would be formed with this node.
            return False
        if path[currCourse]:
            # came across a marked node in the path, cyclic !
            return True

        # 2). postorder DFS on the children nodes
        # mark the node in the path
        path[currCourse] = True

        ret = False
        # postorder DFS, to visit all its children first.
        for child in courseDict[currCourse]:
            ret = self.isCyclic(child, courseDict, checked, path)
            if ret: break

        # 3). after the visits of children, we come back to process the node itself
        # remove the node from the path
        path[currCourse] = False

        # Now that we've visited the nodes in the downstream,
        #   we complete the check of this node.
        checked[currCourse] = True
        return ret
        
        
        
        # Topological Sorting
        from collections import deque
class Solution():
    def canFinish(self,numCourses, prerequisites):
        # Create a graph representation of the courses and their prerequisites using an adjacency list.
        graph = [[] for _ in range(numCourses)]
        for course, prereq in prerequisites:
            graph[prereq].append(course)
        
        # Create an array to keep track of the indegree of each course. Indegree of a course is the number of prerequisites it has.
        indegree = [0] * numCourses
        for course, prereq in prerequisites:
            indegree[course] += 1
        
        # Initialize a queue and add all courses with an indegree of 0 to the queue.
        queue = deque([course for course in range(numCourses) if indegree[course] == 0])
        
        #While the queue is not empty, remove a course from the queue and decrement the indegree of all its neighbors.
        while queue: # Repeat until the queue is empty.
            course = queue.popleft()
            for neighbor in graph[course]:
                indegree[neighbor] -= 1
        # If the indegree of any neighbor becomes 0, add it to the queue.
                if indegree[neighbor] == 0:
                    queue.append(neighbor)
        
        # If all courses have an indegree of 0 at the end, return true. Otherwise, return false.
        return all(indegree[i] == 0 for i in range(numCourses))
