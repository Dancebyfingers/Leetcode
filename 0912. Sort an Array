'''You must solve the problem without using any built-in functions in O(nlog(n)) time complexity 
and with the smallest space complexity possible.'''

class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        '''Heap Sort Θ(nlogn) O(1)
There are two parts in this sort. One part is a utility to get any index on the top, the other part is to make the heap as a max one without sorting, and then swap the largest down and cut it off. At the end, the heap and array length should be zero.'''
        #把数列里某个index的值给拱上去
        def heapify(n:int,i:int):
            largest = i  # 假设largest指的值就是index的值
            left = 2 * i + 1
            right = 2 * i + 2
            #找真的最大值
            if left < n and nums[left] > nums[largest]:
                largest = left
            if right < n and nums[right] > nums[largest]:
                largest = right
            #若真的最大值!=index的值了，就说明上一步找到更大值了，swap，index指的就是真的最大值
            if largest != i:
                nums[i], nums[largest] = nums[largest], nums[i]
                heapify(n, largest) #recursive,把largest拱上去

        #build max heap
        n=len(nums)
        for i in range(n//2, -1, -1): #从一半？到0的每一个index，step=1
            heapify(len(nums), i) #是最大堆了
        #extract elements
        for i in range(len(nums)-1,0,-1): #n-1代表最后一个堆的index
            nums[i], nums[0] = nums[0], nums[i]
            heapify(i, 0)
        return nums
