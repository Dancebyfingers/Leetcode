'''
Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:
If the current number is even, you have to divide it by 2.
If the current number is odd, you have to add 1 to it.
It is guaranteed that you can always reach one for all test cases.

Example 1:
Input: s = "1101"
Output: 6
Explanation: "1101" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  

Example 2:
Input: s = "10"
Output: 1
Explanation: "10" corressponds to number 2 in their decimal representation.
Step 1) 2 is even, divide by 2 and obtain 1.  

Example 3:
Input: s = "1"
Output: 0
 
Constraints:
1 <= s.length <= 500
s consists of characters '0' or '1'
s[0] == '1'
'''

class Solution:
    def numSteps(self, s: str) -> int:
        carry, count = 0, 0
        encounter_1 = False
        for i in range(len(s)-1, 0, -1):  # Iterate from last bit to 2nd bit, s[0] can't be 0
            if s[i] == '0':
                if not encounter_1:    # We haven't encountered any 1. Every char adds one operation.
                    count += 1
                else:    # Every 0 needs 2 operations (carry makes it 1). carry is still 1 as we need to add 1 in this case.
                    count += 2
            elif s[i] == '1':
                if not encounter_1:    # We encounter our first 1. Set carry to 1 and add two operations.
                    encounter_1 = True
                    count += 2
                    carry = 1
                else:    # Every 1 needs one operation (carry makes it 0). carry is still 1 due to addition
                    count += 1
        return count + carry # s = 1 (carry = 1) -> s = 10 (carry = 0) -> s = s / 2 -> s = 1 (carry=0)
