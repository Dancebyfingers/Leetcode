"""
Given a non-negative integer x, compute and return the square root of x.
Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.
Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.

Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
"""

class Solution:
    #  for x>=2, there is always 0 < a < x/2
    def mySqrt(self, x: int) -> int:
       if x < 2:
         return x
       l, r = 2, x // 2 
       while l <= r:
        pivot = l + (r-l) // 2
        num = pivot * pivot
        if num > x:
            r = pivot - 1
        elif num < x:
            l = pivot + 1
        else :
            return pivot
       return r  # goal is to return smaller int, which is right(l > r) 
                
"""
from math import e, log
class Solution:
    def mySqrt(self, x):
        if x < 2:
            return x
        
        left = int(e**(0.5 * log(x)))
        right = left + 1
        return left if right * right > x else right

# Newton solution
class Solution:
    def mySqrt(self, x):
        if x < 2:
            return x
            
        x0 = x
        x1 = (x0 + x / x0) / 2
        while abs(x0 - x1) >= 1:
            x0 = x1
            x1 = (x0 + x / x0) / 2        
            
        return int(x1)"""
          
