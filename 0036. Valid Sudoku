'''Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.
'''


class Solution: 
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        seen = set()

        for i, row in enumerate(board): # iterate row
            for j, val in enumerate(row): # iterate col
                if val != ".":
                    # tuple (val,i) row出现过,以此类推，三种记录方式代表行列宫三个check
                    if (val, i) in seen or (j, val) in seen or (i//3, j//3, val) in seen:
                        return False
                    else:
                        seen.add((val, i))
                        seen.add((j, val))
                        seen.add((i//3, j//3, val))
        print(seen)
        return True
    
    
#         row = [set() for _ in range(9)]
#         col = [set() for _ in range(9)]
#         box = [set() for _ in range(9)]
#         for r in range(9):
#             for c in range(9):
#                 val = board[r][c]
#                 # Check if the position is filled with number
#                 if val == ".":
#                     continue
#                 # Check the row
#                 if val in row[r]:
#                     return False
#                 row[r].add(val)
#                 # Check the column
#                 if val in col[c]:
#                     return False
#                 col[c].add(val)
#                 # Check the box
#                 i = (r//3) * 3 + c//3
#                 if val in box[i]:
#                     return False
#                 box[i].add(val)
#         return True
                    
