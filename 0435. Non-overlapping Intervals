'''Given an array of intervals intervals where intervals[i] = [starti, endi], 
return the minimum number of intervals you need to remove to make the rest of the intervals 
non-overlapping.

 Example 1:
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Example 2:
Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.

Example 3:
Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 
Constraints:
1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104'''
'''尽量移除那些覆盖最广的区间。
先对所有区间的起点进行排序，然后进行遍历，如果新的区间起点比老的区间终点小的话，说明有重叠，需要移除终点靠后的。
我们使用last指针指向上个保留下来的节点，如果intervals[i].end < intervals[last].end，则代表新的区间终点更靠前，所以使用第i个节点代表last，也就是说移除了上面的那个last。然后统计移除了多少次区间即可。
时间复杂度是O(nlogn + n)，空间复杂度是O(1).'''


class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort(key= lambda x: x[0])
        print(intervals)
        count = 0
        last = 0
        for i in range(1, len(intervals)):
            if intervals[last][1] > intervals[i][0]:
                if intervals[i][1] < intervals[last][1]:
                    last = i
                count += 1
            else:
                last = i
        return count


