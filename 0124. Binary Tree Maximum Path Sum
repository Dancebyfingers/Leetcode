'''A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

Constraints:
The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000'''


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

''' Consider a path sum contributed by a subtree only if it is positive. we need to process the children before we process a node. This indicates that we need to perform a post-order traversal of the tree because, in post-order, children are processed before the parent. Recursive function takes the root of the subtree as the input. The function returns the path sum gain contributed by the subtree. To calculate the path sum gain, the function calls itself recursively on the subtree's left and right child.'''

class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        sum = -float('inf')
        # post-order dfs subtree
        def dfs(node):
            nonlocal sum
            if not node:
                return 0
            
            sum_left = max(dfs(node.left), 0)
            sum_right = max(dfs(node.right), 0)
            sum = max(sum, sum_left+sum_right+node.val)
            # return max sum for a path starting at the root of subtree
            return max(sum_left+node.val, sum_right+node.val)

        dfs(root)
        return sum

