"""Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'."""

# worst case O(M×N) in case that the grid map is filled with lands where DFS goes by M×N deep.
class Solution:  # O(M×N)  O(M×N) 
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0              
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if grid[row][col] == '1':
                    count += 1
                    self.dfs(grid, row, col)                   
        return count
        
    # dfs目的是：数了某岛第一个1以后，马上把该岛所有的1都沉没，保证同一个岛不会再被数
    def dfs(self, grid, row, col):
        if row <0 or col < 0 or row == len(grid) or col == len(grid[0]) or grid[row][col] != '1':
            return
        else:
            grid[row][col] = '0' # visited, sink 1->0
        self.dfs(grid, row - 1, col) # 上
        self.dfs(grid, row + 1, col) # 下
        self.dfs(grid, row, col - 1) # 左
        self.dfs(grid, row, col + 1) # 右
        
        
        
 
       

       
