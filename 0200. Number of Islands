"""Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'."""

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        nr = len(grid) # number of rows
        if nr == 0:
            return 0
        nc = len(grid[0]) # number of columns
        for r in range(nr):
            for c in range(nc):
                if grid[r][c] == "1":
                    self.dfs(grid, r, c)
                    count += 1
        return count
        
    def dfs(self, grid, r, c):
        nr = len(grid) # number of rows
        nc = len(grid[0]) # number of columns
        stack = [(r, c)] # stack for DFS, queue for BFS
        grid[r][c] = "v" # visited
        while stack:
            row, col = stack.pop()
            for x, y in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:
                if 0 <= x < nr and 0 <= y < nc and grid[x][y] == "1":
                    stack.append((x, y))
                    grid[x][y] = "v"
