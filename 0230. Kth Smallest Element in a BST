'''Given the root of a binary search tree, and an integer k, 
return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

Constraints:
The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104'''


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution: # O(logn) or O(n) 
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        stack = []
        
        while True:
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop()
            k -= 1
            if not k:
                return root.val
            root = root.right
 
 
 
import heapq
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        heap = [] # k smallest that are greater than the curr we are visiting
        
        def dfs(node):
            if not node:
                return
            # in-order traversal
            dfs(node.left) 
            
            if len(heap) < k:
        # negative value the k smallest elements that are greater than v, which are the candidates for the kth smallest element
                heapq.heappush(heap, -node.val)
        # for each node, check if its value is less than the largest element in the heap
            elif node.val < -heap[0]:
                heapq.heappushpop(heap, -node.val)
            dfs(node.right)
            
        dfs(root)
        return -heap[0]
