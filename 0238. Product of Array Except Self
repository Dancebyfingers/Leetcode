Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 
Constraints:
2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

Follow up: Can you solve the problem in O(1) extra space complexity?
(The output array does not count as extra space for space complexity analysis.)


# Time exceed because everytime mutiply from the start. Use sliding window instead.
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        answer = []
        
        for i in range(len(nums)):
           
            # left production from 0 to i-1
            temProd,left = 1, 1
            for j in range(i):
                temProd = (temProd * nums[j])
            left = temProd
            
            # right production from i to last in nums
            temProd,right = 1, 1
            for k in range(i+1, len(nums)):
                temProd = (temProd * nums[k])
            right = temProd    

            answer.append(left * right)
        return answer
       
        
        
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        answer = [0]*n
        answer[0] = 1

        for i in range(1, n):
            answer[i] = nums[i - 1] * answer[i - 1]
        
        R = 1
        for i in reversed(range(n)):
            answer[i] = answer[i] * R
            R *= nums[i]
        
        return answer  
