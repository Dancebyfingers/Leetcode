'''Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates 
where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency of at least one of the chosen numbers is different.
The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations 
for the given input.

Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []
 
Constraints:
1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40'''


class Solution {
    public List<List<Integer>> combinationSum(final int[] candidates, final int target) {
        final List<List<Integer>> res = new ArrayList<>();
        final List<Integer> cur = new ArrayList<>();
        dfs(res, cur, candidates, 0, target);
        return res;
    }

    private static void dfs(final List<List<Integer>> res,
                            final List<Integer> cur,
                            final int[] candidates,
                            final int used,
                            final int target) {
        if (target == 0) {
            res.add(new ArrayList<>(cur));
            return;
        }

        for (int i = used; i < candidates.length; i++) {
            if (target - candidates[i] >= 0) {
                cur.add(candidates[i]);
                dfs(res, cur, candidates, i, target - candidates[i]);
                cur.remove(cur.size() - 1);
            }
        }
    }
}




class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        candidates.sort()
        self.dfs(candidates, target, 0, res, [])
        return res
    
    
    def dfs(self, nums, target, index, res, path):
        if target < 0:
            return
        elif target == 0:
            res.append(path)
            return
        for i in range(index, len(nums)):
            if nums[index] > target:
                return
            self.dfs(nums, target - nums[i], i, res, path + [nums[i]])
