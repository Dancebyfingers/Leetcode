'''Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
'''

class Solution:
    def trap(self, height: List[int]) -> int:
        l, r, res,  = 0, len(height)-1, 0, 
        l_max, r_max = 0, 0
        
        # l,r get meeting
        while l < r:
            if height[l] < height[r]:
                if height[l] >= l_max: l_max = height[l] 
                else: res += l_max - height[l]
                l+=1

            else:
                if height[r] >= r_max:  r_max = height[r]
                else: res += r_max - height[r]
                r-=1

        return res
        
        
class Solution {
public:
    int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    // l<r, ++l or --r until l=r
    while (left < right) {  
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
    }
};
