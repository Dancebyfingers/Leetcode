"""You are given an integer array nums. 
You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.

Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."""

# forward
def canJump(self, nums):
    m = 0
    for i, num in enumerate(nums):
        if i > m:
            return False
        m = max(m, i+num)
    return True


class Solution {
    public boolean canJump(int[] nums) {       
        int lastIndex = nums.length - 1;
        int maxReachableIndex = 0;

        for (int i = 0; i <= maxReachableIndex && i <= lastIndex; i++) {
            maxReachableIndex = Math.max(maxReachableIndex, i + nums[i]);
            if (maxReachableIndex >= lastIndex) {
            return true;
            }
        }
        return false;
    }
}
    
   
# backward    
    def canJump(self, nums):
        goal = len(nums) - 1 
        # 不是只check前一个i，若前一个i跳不到cur goal，i会继续往前走；
        # 说不定隔两个i就会有个nums[i]是能跳到goal的。那时goal也可以=i
        for i in range(goal + 1)[::-1]:
            if i + nums[i] >= goal:
                goal = i
        # 若goal能一直跑到0(false)，就说明从0开始一定有办法跳到goal，所以要return true（not goal)
        return not goal


class Solution {
    public boolean canJump(int[] nums) {
    int lastIndex = nums.length - 1;

    for (int i = lastIndex; i >= 0; i--) {
        if (i + nums[i] >= lastIndex) {
        lastIndex = i;
        }
    }

    return lastIndex == 0;
    }
}
