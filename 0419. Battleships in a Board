'''
Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.
Battleships can only be placed horizontally or vertically on board. In other words, 
they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. 
At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).

Example 1:
Input: board = [["X",".",".","X"],[".",".",".","X"],[".",".",".","X"]]
Output: 2

Example 2:
Input: board = [["."]]
Output: 0
 
Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is either '.' or 'X'.
 
Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?
'''
# 跟200小岛题一样的解法，但是dfs递归超时，python过不了，只能用python优化版
class Solution:  # optimal solution O(n*m) | O(1)
    def countBattleships(self, board: List[List[str]]) -> int:
        # 什么样的不能数？
        count = 0
        for row in range(len(board)):
            for col in range(len(board[0])):
                # 什么样的不能在count里加？
                if board[row][col] == '.':               # 有‘.’的
                    continue
                if row > 0 and board[row-1][col] == 'X': # 不在第一排且上边没有x
                    continue
                if col > 0 and board[row][col-1] == 'X': # 不在第一列且左边没有x
                    continue
                count +=1
        return count
                
