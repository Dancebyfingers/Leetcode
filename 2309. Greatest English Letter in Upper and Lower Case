'''
Given a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. 
The returned letter should be in uppercase. If no such letter exists, return an empty string.
An English letter b is greater than another letter a if b appears after a in the English alphabet.


Example 1:
Input: s = "lEeTcOdE"
Output: "E"
Explanation:
The letter 'E' is the only letter to appear in both lower and upper case.

Example 2:
Input: s = "arRAzFif"
Output: "R"
Explanation:
The letter 'R' is the greatest letter to appear in both lower and upper case.
Note that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.

Example 3:
Input: s = "AbCdEfGhIjK"
Output: ""
Explanation:
There is no letter that appears in both lower and upper case.
 

Constraints:
1 <= s.length <= 1000
s consists of lowercase and uppercase English letters.
'''


class Solution {                                
    public String greatestLetter(String s) {
        Set<Character> set = new HashSet<>();
        for(char ch : s.toCharArray())          // ：遍历array里面的元素
            set.add(ch);
        
        for(char ch = 'Z'; ch >= 'A'; ch--)
            if(set.contains(ch) && set.contains((char)('a'+(ch-'A'))))
               return ""+ch;
        return "";
  }
}
        


class Solution:
    def greatestLetter(self, s: str) -> str:
        s = set(s)
        print(s)
        for letter in range(ord('Z'), ord('A') -1, -1):    # 从z开始往前过，右边开口，所以A要-1
            if chr(letter) in s and chr(letter+32) in s:   # 对应的小写字母比大写字母多32
                return chr(letter)                         # 要返回最大的，第一个碰到合适的就是答案
        return ''



