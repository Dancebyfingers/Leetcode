'''You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees
(clockwise).You have to rotate the image in-place, which means you have to modify the input 2D matrix 
directly. DO NOT allocate another 2D matrix and do the rotation.
  '''
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        1st arr:
        matrix[0][0]->matrix[0][-1] 
        matrix[0][1]->matrix[1][-1] 
        matrix[0][2]->matrix[2][-1]
        matrix[i][j]->matrix[j][-1]

        2nd arr:
        matrix[1][0]->matrix[0][-2] 
        matrix[1][1]->matrix[1][-2] 
        matrix[1][2]->matrix[2][-2]
        matrix[i][j]->matrix[j][-2]
        """
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n = len(matrix[0])
        # loop前一半行，若奇数，包含中间行
        for i in range(n//2 + n % 2):
            # loop前一半列。要是后一半也走一遍的话就会把移动好了的重新移动一遍，就错了
            for j in range(n//2):
                # n-1-j代表： 从初始矩阵j列，旋转后的行数
                tmp = matrix[n-1-j][i] # 左下角开始作为tmp
                matrix[n-1-j][i] = matrix[n-1-i][n-1-j] # 右下角移动到左下角
                matrix[n-1-i][n-1-j] = matrix[j][n-1-i] # 右上角移动到右下角
                matrix[j][n-1-i] = matrix[i][j] # 左上角移动到右上角
                matrix[i][j] = tmp # 左上角等于初始的那个tmp，即最初左下角
