"""Suppose an array of length n sorted in ascending order is rotated between 1 and n times. 
For example, the array nums = [0,1,2,4,5,6,7] might become:
[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.
"""



class Solution:
    def findMin(self, nums: List[int]) -> int:

        first, last = nums[0], nums[-1]
        if first < last or first == last: 
            return first
        
        else:
            l, r = 0, len(nums)
            
            while l < r:
                m = (l + r) // 2
                if nums[m] < nums[m-1]: # nums[m] lower then previous
                    return nums[m]
                if nums[m] > nums[m+1]: # nums[m] higher then next
                    return nums[m+1]
                if nums[m] > first:
                    l = m + 1
                else: r = m - 1



class Solution {
    public int findMin(int[] nums) {
        // If the list has just one element then return that element.
        if (nums.length == 1) {
            return nums[0];
        }

        // initializing left and right pointers.
        int left = 0, right = nums.length - 1;

        // if the last element is greater than the first element then there is no
        // rotation. e.g. 1 < 2 < 3 < 4 < 5 < 7. Already sorted array.
        // Hence the smallest element is first element. A[0]
        if (nums[right] > nums[0]) {
            return nums[0];
        }

        // Binary search way
        while (right >= left) {
            // Find the mid element
            int mid = left + (right - left) / 2;

            // if the mid element is greater than its next element then mid+1 element is the
            // smallest
            // This point would be the point of change. From higher to lower value.
            if (nums[mid] > nums[mid + 1]) {
                return nums[mid + 1];
            }

            // if the mid element is lesser than its previous element then mid element is
            // the smallest
            if (nums[mid - 1] > nums[mid]) {
                return nums[mid];
            }

            // if the mid elements value is greater than the 0th element this means
            // the least value is still somewhere to the right as we are still dealing with
            // elements
            // greater than nums[0]
            if (nums[mid] > nums[0]) {
                left = mid + 1;
            } else {
                // if nums[0] is greater than the mid value then this means the smallest value
                // is somewhere to
                // the left
                right = mid - 1;
            }
        }
        return Integer.MAX_VALUE;
    }
}


class Solution {
    public int findMin(int[] nums) {
        int l = 0, r = nums.length - 1;
        
        if (nums[l] < nums[r]  || nums[l] == nums[r]){
            return nums[l];
        } else {
            while (l < r){
                int m = l + (r-l) / 2;
                System.out.println(m);
                // nums[m] > nums[m+1] comes first than nums[m-1] > nums[m],
                // otherwise, [2,1] makes nums[m-1] out of range
                if (nums[m] > nums[m+1] ){ // nums[m] higher than next: nums[m+1] is min
                     return nums[m+1];
                }  
                if (nums[m-1] > nums[m] ){ // [7,8,9,0,2,4,5] nums[m+1]= min =0
                    return nums[m];
                }   
                
                if (nums[m] > nums[0]){ // min is somewhere in nums[m] right part
                     l = m + 1;
                }
                   
                else{  // min is somewhere in nums[m] left part
                   r = m - 1; 
                } 
            }
           return Integer.MAX_VALUE;     
        }
        
    }
}
