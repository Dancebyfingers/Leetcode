"""Suppose an array of length n sorted in ascending order is rotated between 1 and n times. 
For example, the array nums = [0,1,2,4,5,6,7] might become:
[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.
"""



class Solution:
    def findMin(self, nums: List[int]) -> int:

        first, last = nums[0], nums[-1]
        if first < last or first == last: 
            return first
        
        else:
            l, r = 0, len(nums)
            
            while l < r:
                m = (l + r) // 2
                if nums[m] < nums[m-1]: # nums[m] lower then previous
                    return nums[m]
                if nums[m] > nums[m+1]: # nums[m] higher then next
                    return nums[m+1]
                if nums[m] > first:
                    l = m + 1
                else: r = m - 1

