"""Given a string s, return the longest palindromic substring in s."""

class Solution:
    def longestPalindrome(self, s):
        res = ""
        for i in range(len(s)):
            # odd case, like "aba"
            tmp = self.helper(s, i, i)
            if len(tmp) > len(res):
                res = tmp
            # even case, like "abba"
            tmp = self.helper(s, i, i+1)
            if len(tmp) > len(res):
                res = tmp
        return res

    # get the longest palindrome, l, r are the middle indexes   
    # from inner to outer
    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]: #当s[r]的r是最后一位+1时，因为r<len(s)到不了此判断，所以不报错
            l -= 1; r += 1
        return s[l+1:r] #当s[l+1:r]的r是最后一位+1时，因为切片右端不包括，所以也不报错



class Solution:
    def longestPalindrome(self, s):
        self.maxlen = 0
        self.start = 0    
                
        for i in range(len(s)):
            self.expandFromCenter(s,i,i)
            self.expandFromCenter(s,i,i+1)
        return s[self.start: self.start + self.maxlen]

    def expandFromCenter(self,s,l,r):
        while l > -1 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1

        if self.maxlen < r-l-1:
            self.maxlen = r-l-1
            self.start = l + 1
