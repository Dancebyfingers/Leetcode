'''Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 
Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109'''



'''不能sort从最小开始，因为最小的连续断开后，后面也许还有别的连续数列'''
# class Solution:
#     def longestConsecutive(self, nums: List[int]) -> int:
#         if not nums:
#             return 0
#         nums.sort()
#         n = len(nums)
#         count = 0
#         
#         for i in range(1,n):
#             if nums[i] == nums[i-1]:
#                 continue
#             if nums[i] == nums[i-1]+1:
#                 count += 1
#             else:
#                 break
#         return count+1

'''碰到断掉的数组这个方案也不行，理由同上，虽然能记住每一位的数，但断掉的部分就停下了，不会继续往下计数了'''
# class Solution:
#     def longestConsecutive(self, nums: List[int]) -> int:
#         nums.sort()
#         n = len(nums)
#         dp = [1] * n
        
#         for i in range(n):
#             for j in range(1,i+1):
#                 if nums[j] == nums[j-1]:
#                     continue
#                 if nums[j] == nums[j-1]+1:
#                     dp[i] += 1
#                 else:
#                     break
#         return max(dp)

'''brutal force, TLE'''
# class Solution:  # O(n^3) O(1)
#     def longestConsecutive(self, nums):
#         max_count = 0

#         for num in nums:
#             curr = num
#             curr_count = 1

#             while curr + 1 in nums:
#                 curr += 1
#                 curr_count += 1

#             max_count = max(max_count, curr_count)

#         return max_count


'''正确的sort方法，通过与前一个不等找到头，若后一个大1就继续，若后一个不大1就记录当前长度找出最长'''
# class Solution:  # O(nlogn)就是sort的时间
#     def longestConsecutive(self, nums):
#         if not nums:
#             return 0

#         nums.sort()
#         m_count = 1
#         curr_count = 1

#         for i in range(1, len(nums)):
#             if nums[i] != nums[i-1]:
#                 if nums[i] == nums[i-1]+1:
#                     curr_count += 1
#                 else:
#                     m_count = max(m_count, curr_count)
#                     curr_count = 1

#         return max(m_count, curr_count)


'''set(nums) is O(n), while在for循环里面貌似是O(n^2)，但是只有连续的部分才会用到while'''
class Solution:  # O(n) O(n)
    def longestConsecutive(self, nums):
        s = set(nums)
        max_count = 0

        for num in s:
            if num - 1 not in s: # 在set里找到头
                curr = num
                curr_count = 1

                while curr + 1 in s:
                    curr += 1
                    curr_count += 1
                max_count = max(max_count, curr_count)
        return max_count

