Reverse bits of a given 32 bits unsigned integer.

Note:
Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 

Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.

Example 2:
Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
 

Constraints:
The input must be a binary string of length 32
Follow up: If this function is called many times, how would you optimize it?


class Solution:
    def reverseBits(self, n: int) -> int:
        b = bin(n) # a string with 0b as a prefix
        print(type(b))
        b1=b[2:] 
        print(type(b1))
        s=b1[::-1] + ("0"*(32-len(b1))) 
        # reversed string AS WE ARE TO ASSUME INITIAL NUMBER IS 32 bit, 
        # so all preceding zeroes will now be at end.

        return int(s,2) # 2 must be there
        
        
# For a bit that is situated at the index i, after the reversion, its position should be 
# 31-i (note: the index starts from zero).
# We iterate through the bit string of the input integer, from right to left (i.e. n = n >> 1). To retrieve the right-most bit of an integer, we apply the bit AND operation (n & 1).
# For each bit, we reverse it to the correct position (i.e. (n & 1) << power). Then we accumulate this reversed bit to the final result.
# When there is no more bits of one left (i.e. n == 0), we terminate the iteration.

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        res, power = 0, 31
        while n:
            res += (n & 1) << power
            n = n >> 1
            power -= 1
        return res
