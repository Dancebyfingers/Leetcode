"""You are given an integer array coins representing coins of different denominations 
and an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:
Input: coins = [2], amount = 3
Output: -1
Example 3:
Input: coins = [1], amount = 0
Output: 0 """

# Dynamic programming - Bottom up
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        # 一维动态数组，dp[j] 表示钱数为j时的最小硬币数. amount+1 由于最小的硬币是1，所以最多需要 amount 个硬币，amount+1 也就相当于当前的最大值了，注意这里不能用整型最大值来初始化，因为在后面的状态转移方程有加1的操作，有可能会溢出，除非你先减个1，这样还不如直接用 amount+1 舒服呢
        dp = [float('inf')] * (amount + 1) 
        dp[0] = 0  # 目标值若为0时，就不需要硬币了

        for i in coins:
            for j in range(i, amount + 1):
                dp[j] = min(dp[j], dp[j - i] + 1) # i代表硬币数额，j-i为钱数j减去其中一个硬币的值
        return dp[amount] if dp[amount] != float('inf') else -1 

        

# BFS-based O(S*n) - Queue and a Set for memoization.
def coinChange(self, coins: List[int], amount: int) -> int:
    q = deque([(amount, 0)])
    seen = set([amount])
    while q:
        accum_amount, num_coins = q.popleft()
        if accum_amount == 0:
                return num_coins
        for coin in coins:
            if accum_amount - coin >= 0 and accum_amount - coin not in seen:
                q.append((accum_amount - coin, num_coins + 1))
                seen.add(accum_amount - coin)
                
    return -1
    
