'''Given two strings s and t of lengths m and n respectively, return the minimum window 
substring of s such that every character in t (including duplicates) is included in the window.
If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:
Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

Constraints:
m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 
Follow up: Could you find an algorithm that runs in O(m + n) time?'''

'''这道题也可以不用 HashMap，直接用个 int 的数组来代替，因为基本ASCII只有128个字符；而且没有必要每次都计算子串，只要有了起始位置和长度，就能唯一的确定一个子串。全局变量 min_left 记录最终子串的l，初始化为-1，min_len记录r。注意在返回的时候要检测一下若 minLeft 仍为初始值 -1，需返回空串'''

class Solution:
    def minWindow(self, s, t):
        t_ch = [0] * 128 # ASIC号码当index,数值初始为0，大于0说明t出现的多，小于0说明s出现的多
        t_leng = len(t)
        left = 0
        cnt = 0
        min_left = -1 # 记录最终子串的左边界
        min_leng = float("inf") # 记录最终子串的长度来确定其右边界
        
        # array变dict套路,k:v = distinct char:frequency,
        # "ordinal". An ordinal is a number that represents the position of something in a sequence. 
        for ch in t:
            t_ch[ord(ch)] += 1
        
        for r, sch in enumerate(s):
            t_ch[ord(sch)] -= 1 # 
            if t_ch[ord(sch)] >= 0:
                cnt += 1
            
            while cnt == t_leng:
                if min_leng > r - left + 1:
                    min_leng = r - left + 1
                    min_left = left
                
                t_ch[ord(s[left])] += 1
                if t_ch[ord(s[left])] > 0:
                    cnt -= 1
                left += 1
        
        return "" if min_left == -1 else s[min_left:min_left + min_leng]
