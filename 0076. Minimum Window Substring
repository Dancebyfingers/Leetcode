'''Given two strings s and t of lengths m and n respectively, return the minimum window 
substring of s such that every character in t (including duplicates) is included in the window.
If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:
Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

Constraints:
m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 
Follow up: Could you find an algorithm that runs in O(m + n) time?'''

'''We keep expanding the window by moving the right pointer. When the window has all the desired characters, 
we contract (if possible) and save the smallest window till now.'''

class Solution: # O(s+t) O(s+t)
    def minWindow(self, s: str, t: str) -> str:
        if not t or not s:
            return ""

        l, r = 0, 0
        t_map = Counter(t) 
        t_char_num = len(t_map) # Num of diff char
        count = 0 # char num from t in the curr win in its desired frequency
        win_char_map = {} # cur win char count dict
        ans = float("inf"), None, None # ans tuple of the form (window length, l, r)

        # keep expanding win by moving r
        while r < len(s):
            s_char = s[r]
            win_char_map[s_char] = win_char_map.get(s_char, 0) + 1 # 0 is return when null
            if s_char in t_map and win_char_map[s_char] == t_map[s_char]:
                count += 1 # s_char in t_map key and eaqual value 

            # Try and contract win till the point where it ceases to be 'desirable'.
            while l <= r and count == t_char_num:
                s_char = s[l]

                # Save the smallest window until now.
                if r - l + 1 < ans[0]:
                    ans = (r - l + 1, l, r)

                # The char at the pos pointed by l is no longer part of the win
                win_char_map[s_char] -= 1
                if s_char in t_map and win_char_map[s_char] < t_map[s_char]:
                    count -= 1
                l += 1    
            # Keep expanding the window once we are done contracting.
            r += 1    
        return "" if ans[0] == float("inf") else s[ans[1] : ans[2] + 1]
