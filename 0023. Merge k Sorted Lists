'''You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.'''


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# First, create a min-heap and add the first node from each linked list to the heap. use a tuple (val, i) to represent each node in the heap. 
# Next, create a dummy node to serve as the head of the merged list, and iterate over the heap until it is empty. For each iteration, pop the smallest node from the heap and append it to the merged list. Then, add the next node from the linked list that the popped node came from to the heap.
# Finally, return the head of the merged list. 

import heapq
class Solution: # O(n log k) O(k)
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        heap = [] # keep track of the next smallest node
        # Add the first node from each linked list to the heap
        for i in range(len(lists)):
            if lists[i]:
                heapq.heappush(heap, (lists[i].val, i))
                lists[i] = lists[i].next
        
        # Create a dummy node to serve as the head of the merged list
        dummy = ListNode(0)
        tail = dummy
        
        # While the heap is not empty, pop the smallest node from the heap
        # and append it to the merged list. Then, add the next node from the
        # linked list that the popped node came from to the heap.
        while heap:
            val, i = heapq.heappop(heap)
            tail.next = ListNode(val)
            tail = tail.next
            if lists[i]:
                heapq.heappush(heap, (lists[i].val, i))
                lists[i] = lists[i].next
        
        # Return the head of the merged list
        return dummy.next
