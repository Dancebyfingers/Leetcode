“”“You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.”“”

# naive solution: [1,4,2] won't pass, 3 is expected while 1 is the answer
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxProfit = 0
        l = 0
        r = len(prices)-1
        while l < r:
            maxProfit = max(maxProfit, prices[r]-prices[l])
            r -= 1
            l += 1
        return maxProfit


# class Solution: # Time Limit Exceeded O(n2)
#     def maxProfit(self, prices: List[int]) -> int:
#        l = 0
#        r = 1
#        m_profit = 0
#        n = len(prices)
#        while l < n:
#            while r < n:
#                m_profit = max(m_profit, prices[r] - prices[l])
#                r += 1
#            l += 1
#            r = l + 1
#        return m_profit


class Solution: # Time Limit Exceeded O(n)
    def maxProfit(self, prices: List[int]) -> int:
        low = 10**4
        m_profit = 0
        for i in range(len(prices)):
            if prices[i] < low:
                low = prices[i]
            elif prices[i] - low > m_profit:
                m_profit = prices[i] - low
        return m_profit

    

class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int l = 0, r = 1;
        while (r < prices.length){
            if (prices[l] < prices[r]){
                maxProfit = Math.max(prices[r] - prices[l], maxProfit);
            }else{l = r;}
             ++r;
        }
        return maxProfit;
    }
}
