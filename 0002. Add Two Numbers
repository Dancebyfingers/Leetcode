"""
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
没把数存到list或者多位数，否则需要颠倒再颠倒。而是直接把node数值提出来变成l1val，l2val
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
    # Without dummyhead, need extra conditional statements to initialize the head's value 
        dummyHead = ListNode(0) # Initialize dummyhead of the returning list
        curr = dummyHead 
        carry = 0 
        
    #  Loop through lists l1 and l2 until reach both ends and crarry is 0
        while l1 or l2 or carry != 0:
    # Set each node of l1,l2's value; If l1,l2 has reached the end, set to 0
            l1Val = l1.val if l1 else 0
            l2Val = l2.val if l2 else 0
            columnSum = l1Val + l2Val + carry  
            
            carry = columnSum // 10  # update carry，向下取整，有几个10进几位
            newNode = ListNode(columnSum % 10)  # Create a new node with the digit value of (sum mod 10) 
            
            curr.next = newNode # set it to current node's next        
            curr = newNode 
            
            l1 = l1.next if l1 else None # update new node if not none, make a linklist
            l2 = l2.next if l2 else None
        return dummyHead.next
