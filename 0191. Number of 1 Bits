"""Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:
Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. 
It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. 
Therefore, in Example 1, the input represents the signed integer. -3.
 
Example 1:
Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
 
Constraints:
The input must be a binary string of length 32. 就是不断右移32次，判断最后一位出现多少次1"""


class Solution:
    def hammingWeight(self, n: int) -> int: 
        return sum((n & (1<<i))!=0 for i in range(32)) # n & (1<<i))!=0 说明n与其左移i位在同一个位置都为1，因为1&1 = 1, 1&0 = 0&1 = 0&0 = 0 
        
class Solution:
    def hammingWeight(self, n: int) -> int:
        cnt = 0
        while n :
            cnt+=1
            n = n & (n-1) # n和n-1的低位不一样，直到有个转折点，就是借位的那个点，从这个点开始的高位，n和n-1都一样，其实就是将原来最右边的1变为0
        return cnt
        
class Solution:
    def hammingWeight(self, n: int) -> int:
        return bin(n).count('1')
