'''Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 
Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

class Solution:
    def isValid(self, s: str) -> bool:
        dic = {'(': ')', '[':']', '{':"}"}
        stack = []
        for ch in s: 
            if ch in dic: 
                stack.append(ch) # stack stores last emerging opening bracket
            elif (not stack) or dic[stack.pop()] != ch:  
                return False 
        return not stack   # check if the stack still contains unmatched open bracket


class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        dic = {'}':'{', ']':'[', ')':'('}
        for ch in s:
            if ch in dic:
                top = stack.pop() if stack else '!'
                if dic[ch] != top:
                    return False
            else:
                stack.append(ch)
        return not stack
            
 
 # This is wrong, it garantee open and close numbers are same, but can't garantee they match
 class Solution:
    def isValid(self, s: str) -> bool:
        counter = 0;
        for i in s: 
             if(i == '(' or '['  or '{'):
                counter+=1;
             elif(i == ')' or ']'  or '}'):    
                counter-=1;
        return counter
