'''Given a string s, return the number of palindromic substrings in it.
A string is a palindrome when it reads the same backward as forward.
A substring is a contiguous sequence of characters within the string.'''

Example 1:
Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

Example 2:
Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 
Constraints:
1 <= s.length <= 1000
s consists of lowercase English letters.'''

class Solution:
    def countSubstrings(self, s: str) -> int:
        def checkPalin(count,l,r):
            while l >= 0 and r < len(s) and s[l] == s[r]:
                count += 1
                l -= 1
                r += 1
            return count
        
        count = 0
        for cur in range(len(s)):
            count = checkPalin(count,cur,cur) # check palindromes odd
            count = checkPalin(count,cur,cur+1) # check palindromes even
        return count


class Solution:
    def countSubstrings(self, S: str) -> int:
        ans, n, cur = 0, len(S), 0
        while (cur < n):
            l, r = cur - 1, cur
            while r < n - 1 and S[r] == S[r+1]: r += 1                
            ans += (r - l) * (r - l + 1) // 2
            cur, r = r + 1, r + 1
            while ~l and r < n and S[r] == S[l]:
                l, r, ans = l - 1, r + 1, ans + 1
        return ans
