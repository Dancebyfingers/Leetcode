""" n -> F(n) """

class Solution:
    def fib(self, n: int) -> int:
        # Math T: O(logN) S: O(1) by Mereck with Binet's forumula
        golden_ratio = (1 + (5 ** 0.5)) / 2
        return round((golden_ratio ** n) / (5 ** 0.5))
        
    def fib(self, n: int) -> int:
        a, b = 0, 1
        for i in range(n): 
              a, b = b, a + b
        return a
        

# DP: 
    def fib(self, N: int) -> int:  # Bottom-Up Approach using Tabulation
            if N <= 1:
                return N

            cache = [0] * (N + 1)
            cache[1] = 1
            for i in range(2, N + 1):
                cache[i] = cache[i - 1] + cache[i - 2]
            return cache[N]


class Solution:  # Top-Down Approach using Memoization
    cache = {0: 0, 1: 1}
    def fib(self, N: int) -> int:
        if N in self.cache:
            return self.cache[N]
        self.cache[N] = self.fib(N - 1) + self.fib(N - 2)
        return self.cache[N] 


# Recursion:
    def fib(self, N: int) -> int:
        if N <= 1:
            return N
        return self.fib(N - 1) + self.fib(N - 2)
