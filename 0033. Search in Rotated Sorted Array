"""There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, 
or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity."""
# 不用考虑原来的数组和原来的pivot或者哪一个是第一个数，etc.
# 只考虑新数组有两部分, 设左右两个ptr，不停的二分出mid，直到跟target相等为止

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        
        while l <= r:
            m = (l + r) // 2
            
            if target == nums[m]:
                return m
                
            # 关键在于获得了中间数后，判断下面要搜索左半段还是右半段
            if nums[l] <= nums[m]: #左半段l-m
                if nums[l] <= target < nums[m]: # target在l和m之间
                    r = m - 1 # r缩短到m左边的数形成新的小数组
                else: # target不在l和m之间
                    l = m + 1 # l缩短到m右边的数形成新的小数组
            else: # 右半段m-r
                if nums[m] < target <= nums[r]:
                    l = m + 1
                else:
                    r = m - 1
            
        return -1
     
     def search(self, nums: List[int], target: int) -> int:
        if target in nums:
            return nums.index(target)
        else:
            return -1
