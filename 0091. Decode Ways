'''A message containing letters from A-Z can be encoded into numbers using the following mapping:
'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters 
using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:
"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".
Given a string s containing only digits, return the number of ways to decode it.
The test cases are generated so that the answer fits in a 32-bit integer.

Example 1:
Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).

Example 2:
Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Example 3:
Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").
 
Constraints:
1 <= s.length <= 100
s contains only digits and may contain leading zero(s).'''

class Solution: O(n),O(1)
    def numDecodings(self, s: str) -> int:
        # dp[i]代表解析s[:i]字符串所有可能的方式的数目
        # 不能从i和i+1分析，情况太多
        if s[0] == "0":  # example3，开头是0，return 0
            return 0
        dp1 = dp2 = 1 # variable as storage
        for i in range(1, len(s)):
            cur = 0

            # 单解码情况
            if s[i] != "0":
                cur = dp1 # 当前不是0就继承上一个dp然后继续

            # 双解码情况
            two_digit = int(s[i - 1: i + 1])
            if 10 <= two_digit <= 26: 
                cur += dp2 # 10-26能解码就加两位之前的dp
            # 两个变量依次顺移
            dp2, dp1 = dp1, cur
        
        return dp1
