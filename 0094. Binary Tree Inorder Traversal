"""Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# In order: l- root - r
""" recursion 和 stack存树的数据是给定内存，太高的树存不了， stackoverflow
        想不费space，就不存child null指针，于是用left child最右末端child reference上一个root，从而找到回去的路！
        1.初始化当前节点为cur,一开始current来到整树root
        2.当前节点不为空:
            a.当前节点有左孩子,找到当前左子树的最右节点，记为pre
                I.如果pre的r指针空，让其指向cur，cur向左移
                II.如果pre的r指针指向cur，让其指向空，cur向右移动
            b.当前节点没有左孩子,cur=cur->right
        根据需要的遍历顺序在不同的时机打印节点,后续遍历时需要返回转列表进行遍历."""
				
class Solution: # Morris traversal T:O(n), S: O(1)
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        res = []
       
        while root:
            if root.left: # 若有左支
                pre = root.left # pre导到root前面左支上  
                while pre.right and pre.right != root: 
                    pre = pre.right # 寻找pre，要么在最右游离末端，或者是跟root形成loop的节点
                    
                if not pre.right: # pre右child没了，说明没有loop
                    pre.right = root # 按照计划连到当前的root上
                    root = root.left # 让刚刚连到root上的那个pre成为新的root
                else: # 若pre右边还有root，说明已经有loop,添加root，然后去右支
                    res.append(root.val) 
                    root = root.right # root向右移
                    
            else: # 若没有左支
                res.append(root.val) # 添加root.value
                root = root.right # root右移
        return res
        

    def inorder(root): # Recursive T:O(n), S: O(n)
      return  self.inorder(root.left) + [root.val] + self.inorder(root.right) if root else []
