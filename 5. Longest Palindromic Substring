"""Given a string s, return the longest palindromic substring in s."""

def longestPalindrome(self, s):
        longest_palindrom = ''
        dp = [[0]*len(s) for _ in range(len(s))]
        # filling out the diagonal by 1
        for i in range(len(s)):
            dp[i][i] = True
            longest_palindrom = s[i]
			
        # filling the dp table
        for i in range(len(s)-1,-1,-1):
				# j starts from the i location : to only work on the upper side of the diagonal 
            for j in range(i+1,len(s)):  
                if s[i] == s[j]:  #if the chars mathces
                    # if len slicied sub_string is just one letter if the characters are equal, we can say they are palindomr dp[i][j] =True 
                    #if the slicied sub_string is longer than 1, then we should check if the inner string is also palindrom (check dp[i+1][j-1] is True)
                    if j-i ==1 or dp[i+1][j-1] is True:
                        dp[i][j] = True
                        # we also need to keep track of the maximum palindrom sequence 
                        if len(longest_palindrom) < len(s[i:j+1]):
                            longest_palindrom = s[i:j+1]
                
        return longest_palindrom


    def longestPalindrome(self, s: str) -> str:
    # Manacher's Algorithm for longest palindromic substrings (LPS)"""
    # Transform S into T. Eg. S = "abba", T = "^#a#b#b#a#$"
    # ^ and $ signs are sentinels appended to each end to avoid bounds checking
        T = '#'.join('^{}$'.format(s))
        n = len(T)
        P = [0]*n
        C = R = 0
        for i in range (1, n-1):
            P[i] = (R > i) and min(R-i, P[2*C-i]) # equals to i' = C - (i-C)
            # Attempt to expand palindrome centered at i
            while T[i+1+P[i]] == T[i-1-P[i]]:
                P[i] += 1
            # If palindrome centered at i expand past R,
            # adjust center based on expanded palindrome
            if i+P[i] > R:
                C, R = i, i+P[i]
        # Find the maximum element in P
        maxLen, centerIndex = max((n, i) for i, n in enumerate(P))
        return s[(centerIndex-maxLen)//2: (centerIndex+maxLen)//2]
