"""Given the head of a linked list, remove the nth node from the end of the list and 
return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]"""

# The fast pointer advances the list by n+1 steps from the beginning, while the slow starts from the beginning. 
# Now, both pointers are exactly separated by n nodes apart. 
# We maintain this constant gap by advancing both together until the fast arrives past the last node. 
# The slow will be pointing at the nth node counting from the last. 
# We relink the next pointer of the node referenced by the slow pointer to point to the node's next next node.


# Definition for singly-linked list.
# class ListNode:  # O(n) O(1)
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
   def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = slow = fast = ListNode(0)
        dummy.next = head
    
        while fast.next:
            fast = fast.next
            n -= 1
            if n < 0:
                slow = slow.next
        
        slow.next = slow.next.next
        return dummy.next
       
     


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution { // O(n) O(1)
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        // Advances fast n steps, so the gap between fast and slow is n nodes
        for (int i = 0; i <= n; i++) {
            fast = fast.next;
        }
        // Move fast and slow together until fast to the end, maintaining the gap
        while (fast != null) {
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return dummy.next;
    }
}
