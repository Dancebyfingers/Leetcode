'''Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# root开始是数组，一旦用了val，left, right就指到具体node了


# class Solution: # O(n) O(n) Recursive DFS inorder
#     def isValidBST(self, root: Optional[TreeNode]) -> bool:
#         def inorder(root):
#             if not root:
#                 return True
#             if not inorder(root.left):
#                 return False
#             if root.val <= self.prev:
#                 return False
#             self.prev = root.val
#             return inorder(root.right)
#         self.prev = -math.inf
#         return inorder(root)


class Solution: # O(n) O(n) Iterative DFS inorder    
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        stack, prev = [], -math.inf
        while stack or root: # trasverse all tree
        # traverses left subtree of the current node 
            while root: 
                stack.append(root) # 第一次进栈是数组，但pop出来就是根node
                root = root.left
            root = stack.pop()
            if root.val <= prev:
                return False
            # traverses the right subtree
            prev = root.val 
            root = root.right
        return True
