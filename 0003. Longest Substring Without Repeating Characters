"""Given a string s, find the length of the longest substring without repeating characters.

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring."""

class Solution: # O(n)ï¼Œ O(min(m,n)) optimized sliding window
    def lengthOfLongestSubstring(self, s: str) -> int:
        dic_set = set()  # stores unrepeated s[i]
        left = 0  # ptr left
        max_len = 0
        for right in range(len(s)):   # ptr right
            while s[right] in dic_set:  # loop until removing all duplicates
                dic_set.remove(s[left])  # slide window by removing leftmost
                left += 1
            dic_set.add(s[right])  # after removing all dups, slide window by adding rightmost
            max_len = max(max_len, right - left + 1) # choose maxlenth 
        return max_len
        
        
 class Solution: 
    def lengthOfLongestSubstring(self, s: str) -> int:
        char_set = set()
        l = 0
        max_len = 0
        for r in range(len(s)):
            if s[r] not in char_set:
                char_set.add(s[r])
                # +1 to include the current character
                max_len = max(max_len, r-l+1) 
            else:
                while s[l] != s[r]:
                    char_set.remove(s[l])
                    l += 1
                # move the left pointer past the repeating character
                l += 1 
        return max_len
        
        
        
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
