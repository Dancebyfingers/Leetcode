"""Given a string s, find the length of the longest substring without repeating characters.

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring."""

class Solution: # O(n)ï¼Œ O(min(m,n)) optimized sliding window
    def lengthOfLongestSubstring(self, s: str) -> int:
        maxlen = 0
        dic = {} # stores the current index
        l = 0
        for r in range(len(s)):   # try to extend the range [i, j]
            if s[r] in dic:
                l = max(dic[s[r]], l)
            maxlen = max(maxlen, r - l + 1)
            dic[s[r]] = r + 1
        return maxlen
        
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
