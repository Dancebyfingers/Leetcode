"""Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence 
of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:
Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:
Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false

Constraints:
1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique."""



""" 指针i表示子字符串从头到当前的长度，j指针切割子字符串 s′(0,j)为 s′(j+1,i)， dp[0]=True因为null算是在字典里。"""
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        n = len(s)
        # dp储存到i为止的结果（对错）
        dp = [False] * (n + 1)
        dp[0] = True # dp[0]=True因为null算是在字典里

        for i in range(1, n + 1): # 指针i表示子字符串从头到当前的长度
            for j in range(i): # j指针切割子字符串 s′(0,j)为 s′(j+1,i)
                if dp[j] and s[j:i] in wordDict: # and前面是对错，不能先跟s[j:i]并
                    dp[i] = True
                    break
        return dp[n]

