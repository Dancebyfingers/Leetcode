'''Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

Example 1:
Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:
Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
 
Constraints:
1 <= nums.length <= 105
nums[i] is either 0 or 1.'''

class Solution {
    public int findMaxLength(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int maxlen = 0, count = 0;
        for (int i = 0; i < nums.length; i++) {
            count = count + (nums[i] == 1 ? 1 : -1);
            if (map.containsKey(count)) {
                maxlen = Math.max(maxlen, i - map.get(count));
            } else {
                map.put(count, i);
            }
        }
        return maxlen;
    }
}


class Solution:  # O(n) O(n) One pass with dict
    def findMaxLength(self, nums: List[int]) -> int:
        dic = {}
        dic[0] = -1
        maxLen, count = 0, 0
        for i in range(len(nums)):
            count +=  1 if nums[i]==1 else -1       # 遇到1count加1，遇到0count-1，count区间[-i,i)

            if count in dic:
                maxLen = max(maxLen, i - dic[count]) # 当前i-字典存的i就可能是最长len
            else:
                dic[count] = i                       # 若字典里还没有这个count，记下来对应的i
        return maxLen

    
